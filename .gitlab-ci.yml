include:
  - project: "waldur/waldur-pipelines"
    file: "/templates/stages.yml"

cache:
  key:
    files:
      - poetry.lock

.base_job:
  image: registry.hpc.ut.ee/mirror/library/python:3.11-bullseye
  stage: test
  interruptible: true
  rules:
    # Skip tests if said so
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
    # If tagged release
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
    # If event is related to a created merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  before_script:
    - apt-get update
    - pip install poetry
    - poetry install

Run linters:
  extends: .base_job
  script:
    - pip install pre-commit
    - pre-commit run --all

Run unit tests:
  extends: .base_job
  script:
    - poetry run pytest ansible_waldur_generator/tests/unit/ --junitxml=unit_report.xml --cov=ansible_waldur_generator --cov-report=xml --cov-report=term-missing
  artifacts:
    when: always
    reports:
      junit: unit_report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
  coverage: '/TOTAL.*\s+(\d+%)$/'

Run E2E tests:
  extends: .base_job
  script:
    # Generating Ansible Collections
    - poetry run ansible-waldur-generator

    # Target only the E2E test directory
    - WALDUR_API_URL=http://127.0.0.1:8000/ poetry run pytest ansible_waldur_generator/tests/e2e/ --junitxml=e2e_report.xml --vcr-record=none
  artifacts:
    when: always
    reports:
      junit: e2e_report.xml

Upload docs to central repository:
  image: "registry.hpc.ut.ee/mirror/library/python:3.12"
  stage: deploy
  interruptible: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  variables:
    GUIDE_PATH: docs/integrator-guide/ansible-module.md
  script:
    - cd /tmp/
    - git clone "https://gitlab-ci-token:$GITLAB_TOKEN@$CI_SERVER_HOST/waldur/waldur-docs.git"
    - cd waldur-docs
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - cp -vf ${CI_BUILDS_DIR}/${CI_PROJECT_PATH}/README.md $GUIDE_PATH
    - git commit $GUIDE_PATH -m "Update Ansible Module Generator guide" || exit 0
    - git branch new-ansible-module-guide
    - git push --set-upstream origin new-ansible-module-guide:master
