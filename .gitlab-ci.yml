include:
  - project: "waldur/waldur-pipelines"
    file: "/templates/stages.yml"

cache:
  key:
    files:
      - poetry.lock

.base_job:
  image: registry.hpc.ut.ee/mirror/library/python:3.11-bullseye
  stage: test
  interruptible: true
  rules:
    # Skip tests if said so
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "main"'
    # If tagged release
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
    # If event is related to a created merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  before_script:
    - apt-get update
    - pip install poetry
    - poetry install

Run linters:
  extends: .base_job
  script:
    - pip install pre-commit
    - pre-commit run --all

Run unit tests:
  extends: .base_job
  script:
    - poetry run pytest ansible_waldur_generator/tests/unit/ --junitxml=unit_report.xml --cov=ansible_waldur_generator --cov-report=xml --cov-report=term-missing
  artifacts:
    when: always
    reports:
      junit: unit_report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
  coverage: '/TOTAL.*\s+(\d+%)$/'

Run E2E tests:
  extends: .base_job
  script:
    # Generating Ansible Collections
    - poetry run ansible-waldur-generator

    # Target only the E2E test directory
    - poetry run pytest ansible_waldur_generator/tests/e2e/ --junitxml=e2e_report.xml --vcr-record=none
  artifacts:
    when: always
    reports:
      junit: e2e_report.xml
