#!/usr/bin/python
#
# THIS FILE IS AUTOGENERATED BY THE ANSIBLE MODULE GENERATOR - DO NOT EDIT
#
from ansible.module_utils.basic import AnsibleModule
from ansible_waldur_generator.plugins.crud.runner import CrudResourceRunner
{% for imp in sdk_imports %}
from {{ imp.module }} import {{ imp.function }}
{% endfor %}

ANSIBLE_METADATA = {
    "metadata_version": "1.1",
    "status": ["preview"],
    "supported_by": "OpenNode",
}

DOCUMENTATION = """
---
{{ documentation_yaml | trim | indent(0) }}
"""

EXAMPLES = """
{{ examples_yaml | trim | indent(0) }}
"""

def main():
    """Main function for the Ansible module."""
    argument_spec = dict(
        access_token=dict(type='str', required=True, no_log=True),
        api_url=dict(type='str', required=True),
        state=dict(type='str', default='present', choices=['present', 'absent']),
    {% for name, opts in parameters.items() %}
        {{ name }}=dict(
            type='{{ opts.type }}',
            required={{ opts.get('required', False) }}
            {% if opts.choices -%}
            , choices={{ opts.choices }}
            {%- endif %}
        ),
    {% endfor %}
    )

    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True,
    )
    runner_context = {
        'resource_type': '{{ runner_context.resource_type }}',

        # Pass the actual function objects to the runner
        'existence_check_func': {{ runner_context.existence_check_func }},
        'present_create_func': {{ runner_context.present_create_func }},
        'present_create_model_class': {{ runner_context.present_create_model_class }},
        'absent_destroy_func': {{ runner_context.absent_destroy_func }},
        'absent_destroy_path_param': '{{ runner_context.absent_destroy_path_param }}',
        'model_param_names': [
            {% for name in runner_context.model_param_names %}
            '{{ name }}',
            {% endfor %}
        ],
        'resolvers': {
            {% for name, resolver in runner_context.resolvers.items() %}
            '{{ name }}': {
                'list_func': {{ resolver.list_func }},
                'retrieve_func': {{ resolver.retrieve_func }},
                'error_message': "{{ resolver.error_message }}",
            },
            {% endfor %}
        }
    }

    # 2. Instantiate the generic runner and pass the context to it.
    runner = CrudResourceRunner(module, runner_context)

    # 3. Run it.
    runner.run()


if __name__ == '__main__':
    main()
