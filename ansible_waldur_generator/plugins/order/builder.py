"""
Builds the final GenerationContext object for an 'order' type module.
"""

from typing import Dict, List, Any

# Import standard OpenAPI to Ansible type mapping and auth options
from ansible_waldur_generator.helpers import (
    AUTH_OPTIONS,
    OPENAPI_TO_ANSIBLE_TYPE_MAP,
)
from ansible_waldur_generator.models import (
    AnsibleModuleParams,
)
from ansible_waldur_generator.interfaces.builder import BaseContextBuilder
from ansible_waldur_generator.plugins.order.config import OrderModuleConfig

# Base Ansible 'argument_spec' for all modules generated by this plugin.
# It includes authentication, state management, and async handling parameters,
# ensuring consistency across all generated 'order' modules.
BASE_SPEC = {
    **AUTH_OPTIONS,
    "state": {
        "description": "Should the resource be present or absent.",
        "choices": ["present", "absent"],
        "default": "present",
        "type": "str",
    },
    "wait": {
        "description": "A boolean value that defines whether to wait for the order to complete.",
        "default": True,
        "type": "bool",
    },
    "timeout": {
        "description": "The maximum number of seconds to wait for the order to complete.",
        "default": 600,
        "type": "int",
    },
    "interval": {
        "description": "The interval in seconds for polling the order status.",
        "default": 20,
        "type": "int",
    },
}


class OrderContextBuilder(BaseContextBuilder):
    """Builds the GenerationContext for a marketplace 'order' module."""

    # Explicitly type the module_config for better static analysis and autocompletion.
    module_config: OrderModuleConfig

    def _build_return_block(self) -> Dict[str, Any]:
        # Use the 'existence_check' operation's success response as the source.
        # This operation returns the final resource object.
        return_content = None
        if self.module_config.existence_check_op.api_op:
            existence_check_op_spec = (
                self.module_config.existence_check_op.api_op.raw_spec
            )
            # Note: The existence check is a 'list' operation, so we need to get the schema of the items in the list.
            return_content = self.return_generator.generate_for_operation(
                existence_check_op_spec
            )

        return_block_dict = {}
        if return_content:
            # Structure the final dictionary that will be converted to YAML
            return_block_dict = {
                "resource": {
                    "description": f"A dictionary describing the {self.module_config.resource_type} after a successful 'present' state.",
                    "type": "dict",
                    "returned": "on success when state is 'present'",
                    "contains": return_content,
                }
            }
        return return_block_dict

    def _build_parameters(self) -> AnsibleModuleParams:
        """
        Creates the complete dictionary of Ansible module parameters by combining
        standard, built-in, and user-configured parameters.
        """
        params: AnsibleModuleParams = {**BASE_SPEC}

        # Add standard parameters (name, project, offering) that are always present.
        params["name"] = {
            "type": "str",
            "required": True,
            "description": f"The name of the {self.module_config.resource_type}.",
        }
        params["project"] = {
            "type": "str",
            "required": True,
            "description": "The name or UUID of the project.",
        }
        params["offering"] = {
            "type": "str",
            "required": True,
            "description": "The name or UUID of the marketplace offering.",
        }
        # A description parameter is almost always useful for updates.
        params["description"] = {
            "type": "str",
            "required": False,
            "description": f"A description for the {self.module_config.resource_type}.",
        }

        # Add parameters defined in the 'attribute_params' section of the config.
        for p_conf in self.module_config.attribute_params:
            param_name = p_conf["name"]
            # Map OpenAPI type to Ansible type, defaulting to 'str'.
            param_type = OPENAPI_TO_ANSIBLE_TYPE_MAP.get(
                p_conf.get("type", "string"), "str"
            )
            # If the parameter is resolved, its description should reflect that.
            description = p_conf.get("description", "")
            if p_conf.get("is_resolved"):
                description = f"The name or UUID of the {param_name}. {description}"

            params[param_name] = {
                "type": param_type,
                "required": p_conf.get("required", False),
                "description": description.strip(),
            }
            if "choices" in p_conf:
                params[param_name]["choices"] = p_conf["choices"]

        return params

    def _build_runner_context(self) -> Dict[str, Any]:
        """
        Builds the context dictionary needed by the OrderRunner at runtime.
        This is a critical step that passes Python functions and configuration
        from the generator to the generated module's logic.
        """
        conf = self.module_config

        # Build a simple dictionary of resolvers for the runner.
        resolvers_data = {}
        for name, resolver in conf.resolvers.items():
            resolvers_data[name] = {
                "url": resolver.list_op.path if resolver.list_op else "",
                "error_message": resolver.error_message,
            }

        # Collect the names of parameters that go into the 'attributes' dict.
        attribute_param_names = [p["name"] for p in conf.attribute_params]
        attribute_param_names.append("description")

        # Construct the final context dictionary.
        return {
            "resource_type": conf.resource_type,
            # Configured operations:
            "existence_check_url": conf.existence_check_op.api_op.path
            if conf.existence_check_op.api_op
            else "",
            "existence_check_filter_keys": {"project": "project_uuid"},
            "update_url": conf.update_op.api_op.path
            if conf.update_op and conf.update_op.api_op
            else None,
            "update_check_fields": conf.update_check_fields,
            # Built-in (hardcoded) operations and models:
            "order_create_url": "/api/marketplace-orders/",
            "order_poll_url": "/api/marketplace-orders/",
            "terminate_url": "/api/marketplace-resources/",
            # Parameter and resolver information for the runner:
            "attribute_param_names": list(
                set(attribute_param_names)
            ),  # Ensure uniqueness
            "resolvers": resolvers_data,
        }

    def _build_examples(
        self,
        module_name: str,
        parameters: AnsibleModuleParams,
        collection_namespace: str,
        collection_name: str,
    ) -> List[Dict[str, Any]]:
        """Builds the EXAMPLES block as a list of Python dictionaries."""

        def get_example_params(param_names, extra_params=None):
            """Helper to build the parameter dictionary for a task example."""
            params = {
                "access_token": "b83557fd8e2066e98f27dee8f3b3433cdc4183ce",
                "api_url": "https://waldur.example.com/api",
            }
            if extra_params:
                params.update(extra_params)

            for p_name in param_names:
                info = parameters.get(p_name, {})
                if "project" in p_name:
                    value = "Cloud Project"
                elif "offering" in p_name:
                    value = "Standard Volume Offering"
                elif "name" in p_name:
                    value = f"My-Awesome-{self.module_config.resource_type.replace(' ', '-')}"
                elif "size" in p_name:
                    value = "10"
                elif info.get("choices"):
                    value = info["choices"][0]
                else:
                    value = "some_value"
                params[p_name] = value
            return params

        # Get names of required parameters for the 'present' state
        create_param_names = [
            name for name, opts in parameters.items() if opts.get("required")
        ]

        # Prepare parameters for the update example.
        # It needs identifying parameters (name, project) and the field to update.
        update_example_params = {
            "name": f"My-Awesome-{self.module_config.resource_type.replace(' ', '-')}",
            "project": "Cloud Project",
            "state": "present",  # State is 'present' for updates
            "description": "A new updated description for the resource.",
            # Auth params are still needed
            "access_token": "b83557fd8e2066e98f27dee8f3b3433cdc4183ce",
            "api_url": "https://waldur.example.com/api",
        }

        fqcn = f"{collection_namespace}.{collection_name}.{module_name}"

        examples = [
            {
                "name": f"Create a new {self.module_config.resource_type}",
                "hosts": "localhost",
                "tasks": [
                    {
                        "name": f"Add {self.module_config.resource_type}",
                        fqcn: get_example_params(
                            create_param_names, {"state": "present"}
                        ),
                    }
                ],
            },
            {
                "name": f"Update an existing {self.module_config.resource_type}",
                "hosts": "localhost",
                "tasks": [
                    {
                        "name": f"Update the description of a {self.module_config.resource_type}",
                        fqcn: update_example_params,
                    }
                ],
            },
            {
                "name": f"Remove an existing {self.module_config.resource_type}",
                "hosts": "localhost",
                "tasks": [
                    {
                        "name": f"Remove {self.module_config.resource_type}",
                        fqcn: {
                            # Only name and project are typically needed for deletion
                            "name": f"My-Awesome-{self.module_config.resource_type.replace(' ', '-')}",
                            "project": "Cloud Project",
                            "state": "absent",
                            # Auth params are still needed
                            "access_token": "b83557fd8e2066e98f27dee8f3b3433cdc4183ce",
                            "api_url": "https://waldur.example.com/api",
                        },
                    }
                ],
            },
        ]

        # Only include the update example if the module actually supports updates.
        if not self.module_config.update_op:
            examples.pop(1)  # Remove the update example at index 1

        return examples
